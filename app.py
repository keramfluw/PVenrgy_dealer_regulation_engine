import io
import base64
import streamlit as st
import pandas as pd

st.set_page_config(page_title="PV-Aufgabenplaner ‚Ä¢ v2", layout="wide")

# ==============================
# Branding (Logo + Farben)
# ==============================
with st.sidebar:
    st.image("assets/qrauts_logo.png", caption="Brand/Logo (√§nderbar)", use_column_width=True)
    st.write("**Branding**")
    primary = st.text_input("Prim√§rfarbe (HEX)", value="#0F6FFF")
    accent = st.text_input("Akzentfarbe (HEX)", value="#111827")

    css = f"""
    <style>
    :root {{
        --primary: {primary};
        --accent: {accent};
    }}
    .stButton>button {{
        border-radius: 6px;
        border: 1px solid var(--primary);
        color: white !important;
        background: var(--primary);
    }}
    .stDownloadButton>button {{
        border-radius: 6px;
        border: 1px solid var(--accent);
        color: white !important;
        background: var(--accent);
    }}
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {{
        border-bottom: 3px solid var(--primary);
    }}
    h1, h2, h3 {{ color: var(--accent); }}
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

    uploaded_logo = st.file_uploader("Eigenes Logo hochladen (PNG)", type=["png"])
    if uploaded_logo is not None:
        # Persist hochgeladenes Logo unter gleichem Pfad
        with open("assets/qrauts_logo.png", "wb") as f:
            f.write(uploaded_logo.read())
        st.rerun()

st.title("PV-Aufgabenplaner ‚Ä¢ Stromverkauf an Dritte (v2)")
st.caption(
    "Filtert RACI-Aufgaben abh√§ngig von **Anlagengr√∂√üe**, **Betreibermodell** und **Mess-/Steuerkonzept**. "
    "Optional: Excel-Upload zur Erweiterung/√úberschreibung."
)

# ==============================
# Basis-Aufgaben (inkl. ¬ß14a/WP)
# ==============================
BASE_TASKS = [
    # Rechtlich & regulatorisch
    {"Aufgabe":"Gewerbeanmeldung / Unternehmensform pr√ºfen","Kategorie":"Rechtlich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Anmeldung im Marktstammdatenregister (BNetzA)","Kategorie":"Rechtlich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Anmeldung beim Netzbetreiber (Inbetriebnahme, Lieferbeziehungen)","Kategorie":"Rechtlich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Pr√ºfung EEG/EnWG-Einordnung (Eigenversorgung, gGV, Mieterstrom, Direktlieferung, Kundenanlage)","Kategorie":"Rechtlich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Jurist/Consultant","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Lieferantenrahmenvertrag mit Netzbetreiber (bei Netzdurchleitung)","Kategorie":"Rechtlich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},

    # Steuern & Abgaben
    {"Aufgabe":"Umsatzsteuerliche Behandlung kl√§ren (Regelbesteuerung, Rechnungsstellung)","Kategorie":"Steuern","Pflicht/Optional":"Pflicht","R":"Steuerberater","ACI":"Eigent√ºmer","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Einkommen-/K√∂rperschaftsteuer & Gewerbesteuer ber√ºcksichtigen","Kategorie":"Steuern","Pflicht/Optional":"Pflicht","R":"Steuerberater","ACI":"Eigent√ºmer","Zeitachse":"J√§hrlich","Priorit√§t":"Hoch"},
    {"Aufgabe":"Stromsteuer: Registrierung/Anmeldung beim Hauptzollamt (bei Lieferung an Dritte)","Kategorie":"Steuern","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"EEG-Umlage-/Besonderheiten bei Lieferung an Dritte pr√ºfen","Kategorie":"Steuern","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},

    # Vertraglich
    {"Aufgabe":"Stromliefervertr√§ge mit Abnehmern (Mieter/Kunden) erstellen","Kategorie":"Vertraglich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Jurist","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"AGB/Transparenzpflichten pr√ºfen (z. B. StromGVV-Bezug)","Kategorie":"Vertraglich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Jurist","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Datenschutz (DSGVO) f√ºr Mess-/Abrechnungsdaten sicherstellen","Kategorie":"Vertraglich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"DSB","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},

    # Technisch / Messung / Steuerung
    {"Aufgabe":"Messkonzept erstellen (Summenz√§hler, Untermessung, Drittmengenabgrenzung)","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Messstellenbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Installation von Z√§hlern / iMSys (Pflichtf√§lle beachten)","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Messstellenbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Registrierende Lastgangmessung (RLM) bei Pflichtf√§llen","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Messstellenbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Netzanschluss-/Einspeisekonzept abstimmen","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"Redispatch 2.0 umsetzen (i. d. R. ab ‚â•100 kW installierte Leistung)","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Direktvermarkter/EVU","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},

    # ¬ß14a / W√§rmepumpe
    {"Aufgabe":"¬ß14a-Teilnahme pr√ºfen und steuern (steuerbare Verbrauchseinrichtungen)","Kategorie":"Technisch","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber/MSB","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},
    {"Aufgabe":"WP-Tarif-/Steuerkonzept (W√§rmepumpe) definieren und vertraglich abbilden","Kategorie":"Vertraglich","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"EVU/Jurist","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Hoch"},

    # Abrechnung & Verwaltung
    {"Aufgabe":"Verbrauchserfassung & Abrechnung (inkl. Drittmengenabgrenzung)","Kategorie":"Verwaltung","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Dienstleister","Zeitachse":"Laufender Betrieb","Priorit√§t":"Mittel"},
    {"Aufgabe":"Rechnungsstellung (mit USt) an Abnehmer","Kategorie":"Verwaltung","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"Laufender Betrieb","Priorit√§t":"Mittel"},
    {"Aufgabe":"EEG-/Energiemengenmeldungen an Netzbetreiber","Kategorie":"Verwaltung","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Netzbetreiber","Zeitachse":"J√§hrlich","Priorit√§t":"Mittel"},
    {"Aufgabe":"Jahresmeldungen beim Hauptzollamt (Stromsteuer, falls relevant)","Kategorie":"Verwaltung","Pflicht/Optional":"Pflicht","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"J√§hrlich","Priorit√§t":"Mittel"},

    # Strategisch/Optional
    {"Aufgabe":"Bilanzkreis-/Direktvermarktungs-/Abrechnungsdienstleister beauftragen","Kategorie":"Strategisch","Pflicht/Optional":"Optional","R":"Eigent√ºmer","ACI":"Dienstleister","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Niedrig"},
    {"Aufgabe":"Mieterstromf√∂rderung pr√ºfen (falls Mieterstrommodell)","Kategorie":"Strategisch","Pflicht/Optional":"Optional","R":"Eigent√ºmer","ACI":"Steuerberater","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Niedrig"},
    {"Aufgabe":"Versicherung (Ertragsausfall/Haftpflicht) optimieren","Kategorie":"Strategisch","Pflicht/Optional":"Optional","R":"Eigent√ºmer","ACI":"Versicherung","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Niedrig"},
    {"Aufgabe":"IT-/Plattforml√∂sung f√ºr Abrechnung & Portale","Kategorie":"Strategisch","Pflicht/Optional":"Optional","R":"Eigent√ºmer","ACI":"IT-Dienstleister","Zeitachse":"Vor Inbetriebnahme","Priorit√§t":"Niedrig"},
]

MODELS = [
    "Gemeinschaftliche Geb√§udeversorgung (gGV)",
    "Mieterstrom",
    "Direktlieferung an Dritte (Netzdurchleitung)",
    "Kundenanlage / geschlossenes Verteilernetz",
    "PV + W√§rmepumpe (¬ß14a)"
]

MESSKONZEPTE = [
    "Summenz√§hlerkonzept",
    "Untermessung (Drittmengenabgrenzung)",
    "iMSys (Smart Meter)",
    "RLM (Lastgangmessung)",
    "¬ß14a-Management"
]

# ==============================
# Excel-Upload & Zusammenf√ºhren
# ==============================
def normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    mapping = {
        "aufgabe": "Aufgabe",
        "kategorie": "Kategorie",
        "pflicht/optional": "Pflicht/Optional",
        "verantwortlich (r)": "R",
        "r": "R",
        "unterst√ºtzung (a/c/i)": "ACI",
        "aci": "ACI",
        "priorit√§t": "Priorit√§t",
        "zeitachse": "Zeitachse",
        "begr√ºndung": "Begr√ºndung",
    }
    cols = {}
    for c in df.columns:
        key = c.strip().lower()
        cols[c] = mapping.get(key, c)
    return df.rename(columns=cols)

uploaded_df = None
with st.expander("üîº Optional: Eigene Excel-Aufgabenmatrix hochladen (wird mit Basisdaten zusammengef√ºhrt)"):
    file = st.file_uploader("Excel (*.xlsx)", type=["xlsx"])
    if file is not None:
        try:
            tmp = pd.read_excel(file)
            tmp = normalize_columns(tmp)
            required = {"Aufgabe", "Kategorie", "Pflicht/Optional", "R", "ACI"}
            missing = required - set(tmp.columns)
            if missing:
                st.error(f"Fehlende Spalten in Upload: {', '.join(sorted(missing))}")
            else:
                uploaded_df = tmp
                st.success(f"Upload gelesen: {tmp.shape[0]} Zeilen.")
                st.dataframe(tmp.head(20), use_container_width=True)
        except Exception as e:
            st.error(f"Fehler beim Lesen: {e}")

# ==============================
# Regel-Engine
# ==============================
def apply_rules(df: pd.DataFrame, size_kwp: int, model: str, messkonzepte: list, nur_pflicht: bool) -> pd.DataFrame:
    df = df.copy()
    if "Begr√ºndung" not in df.columns:
        df["Begr√ºndung"] = ""
    df["Gilt"] = False

    for idx, row in df.iterrows():
        reason = []
        applies = False

        # Grundpflichten
        if row.get("Kategorie") in ["Rechtlich", "Vertraglich", "Technisch", "Steuern", "Verwaltung"]:
            applies = True
            reason.append("Grundpflichten bei Lieferung an Dritte")

        # Modellabh√§ngig
        aufgabe = str(row.get("Aufgabe", ""))
        if model == "Mieterstrom":
            if "Mieterstrom" in aufgabe:
                applies = True; reason.append("Spezifisch f√ºr Mieterstrom")
            if "Lieferantenrahmenvertrag" in aufgabe:
                applies = False; reason.append("Kein Lieferantenrahmenvertrag bei reinem Mieterstrom √ºblich")
        elif model == "Gemeinschaftliche Geb√§udeversorgung (gGV)":
            if "Messkonzept" in aufgabe or "Drittmengenabgrenzung" in aufgabe:
                applies = True; reason.append("gGV erfordert sauberes Mess-/Abgrenzkonzept")
            if "Lieferantenrahmenvertrag" in aufgabe:
                applies = False; reason.append("gGV: i. d. R. keine Netzdurchleitung")
        elif model == "Direktlieferung an Dritte (Netzdurchleitung)":
            if "Lieferantenrahmenvertrag" in aufgabe:
                applies = True; reason.append("Netzdurchleitung erfordert Lieferantenrahmenvertrag")
        elif model == "Kundenanlage / geschlossenes Verteilernetz":
            if "Pr√ºfung EEG/EnWG" in aufgabe:
                applies = True; reason.append("Kundenanlage/GV: EnWG-Abgrenzung zwingend")
        elif model == "PV + W√§rmepumpe (¬ß14a)":
            if ("¬ß14a" in aufgabe) or ("WP-" in aufgabe) or ("W√§rmepumpe" in aufgabe):
                applies = True; reason.append("¬ß14a-/WP-spezifische Aufgabe")

        # Mess-/Steuerkonzepte
        joined = " ".join(messkonzepte)
        if "iMSys" in joined and "iMSys" in aufgabe:
            applies = True; reason.append("iMSys ausgew√§hlt")
        if "RLM (Lastgangmessung)" in messkonzepte and ("RLM" in aufgabe or "Lastgang" in aufgabe):
            applies = True; reason.append("RLM ausgew√§hlt")
        if "¬ß14a-Management" in messkonzepte and "¬ß14a" in aufgabe:
            applies = True; reason.append("¬ß14a-Management ausgew√§hlt")
        if any(k in joined for k in ["Summenz√§hlerkonzept", "Untermessung (Drittmengenabgrenzung)"]):
            if "Messkonzept" in aufgabe or "Drittmengenabgrenzung" in aufgabe:
                applies = True; reason.append("Messkonzept ausgew√§hlt")

        # Schwellen (Heuristik)
        if size_kwp >= 100:
            if "Redispatch 2.0" in aufgabe:
                applies = True; reason.append("‚â•100 kWp ‚Üí Redispatch 2.0 wahrscheinlich")
        else:
            if "Redispatch 2.0" in aufgabe:
                applies = False; reason.append("<100 kWp ‚Üí Redispatch i. d. R. nicht erforderlich")

        # Pflichtfilter
        if nur_pflicht and str(row.get("Pflicht/Optional", "")).strip() != "Pflicht":
            applies = False; reason.append("Nur Pflichtaufgaben gefiltert")

        df.at[idx, "Gilt"] = applies
        # De-duplicate reasons (stabile Reihenfolge)
        df.at[idx, "Begr√ºndung"] = "; ".join(dict.fromkeys(reason))

    return df[df["Gilt"]].drop(columns=["Gilt"])

# ==============================
# Parameter (Sidebar)
# ==============================
with st.sidebar:
    st.markdown("---")
    st.header("Parameter")
    size_kwp = st.number_input("Anlagengr√∂√üe (kWp)", min_value=1, max_value=20000, value=120, step=1)
    model = st.selectbox("Betreibermodell", MODELS, index=0)
    messkonzepte = st.multiselect("Mess-/Steuerkonzept(e)", MESSKONZEPTE, default=["Summenz√§hlerkonzept","Untermessung (Drittmengenabgrenzung)"])
    nur_pflicht = st.checkbox("Nur Pflichtaufgaben anzeigen", value=True)

# ==============================
# Datenbasis zusammenf√ºhren
# ==============================
base_df = pd.DataFrame(BASE_TASKS)
if uploaded_df is not None:
    merged = pd.concat([uploaded_df, base_df], ignore_index=True)

    # Sicherstellen, dass optionale Spalten existieren
    for col in ["Begr√ºndung", "Priorit√§t", "Zeitachse"]:
        if col not in merged.columns:
            merged[col] = ""

    # Deduplizieren nach Aufgabe ‚Äì Upload hat Vorrang
    merged = merged.sort_values(by=["Aufgabe"]).drop_duplicates(subset=["Aufgabe"], keep="first").reset_index(drop=True)
    tasks_df = merged
else:
    tasks_df = base_df

filtered = apply_rules(tasks_df, size_kwp, model, messkonzepte, nur_pflicht)

# Spaltenreihenfolge
cols = ["Aufgabe","Kategorie","Pflicht/Optional","Priorit√§t","Zeitachse","R","ACI","Begr√ºndung"]
filtered = filtered[[c for c in cols if c in filtered.columns]]

# ==============================
# Anzeige + Export
# ==============================
st.subheader("Gefilterte Aufgaben")
st.dataframe(filtered, use_container_width=True, height=420)

def to_excel_bytes(df: pd.DataFrame) -> bytes:
    from io import BytesIO
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Aufgaben")
    return output.getvalue()

col1, col2 = st.columns(2)
with col1:
    st.download_button(
        "Export als Excel",
        data=to_excel_bytes(filtered),
        file_name=f"PV_Aufgaben_{size_kwp}kWp_{model.replace(' ','_')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
with col2:
    st.download_button(
        "Export als CSV",
        data=filtered.to_csv(index=False).encode("utf-8"),
        file_name=f"PV_Aufgaben_{size_kwp}kWp_{model.replace(' ','_')}.csv",
        mime="text/csv"
    )

st.markdown("---")
with st.expander("‚ÑπÔ∏è Regel-Logik (Kurz√ºberblick)"):
    st.write("""
    **Modell-Logik:**
    - *Mieterstrom:* Mieterstrom-spezifische Aufgaben; i. d. R. **kein** Lieferantenrahmenvertrag.
    - *gGV:* Fokus auf Mess-/Drittmengenabgrenzung.
    - *Direktlieferung (Netzdurchleitung):* Lieferantenrahmenvertrag **erforderlich**.
    - *Kundenanlage/GV:* EnWG-Einordnung besonders zu pr√ºfen.
    - *PV + W√§rmepumpe (¬ß14a):* ¬ß14a-/WP-spezifische Aufgaben greifen.

    **Schwellen/Heuristiken:**
    - Redispatch 2.0 **ab ca. ‚â•100 kWp** (vorab mit NB/DV kl√§ren).
    - iMSys, RLM, ¬ß14a je nach Auswahl.
    """)
